<script setup>
import {ref, onMounted, getCurrentInstance, reactive} from "vue";
import {{modelName}}Api from "@api/{{modelNameLower}}.api";
import {useRoute, useRouter} from "vue-router";
import FilterApi from "@api/filter.api";
import {ElMessage} from "element-plus";
import {useLoaderStore} from "@store/loader";

const loaderStore = useLoaderStore();
const route = useRoute();
const router = useRouter();
const app = getCurrentInstance();
const t = app.appContext.config.globalProperties.$t;
let resource = ref({
    embed: "",
});
let isUpdateForm = ref(false);
let errors = reactive([]);
const disabled = ref(false);

async function getResource() {
    if (!isUpdateForm.value) return;
    {{modelName}}Api.get({id: route.params.id}, {embed: resource.value.embed})
        .then(({data}) => {
            resource.value = data.data;
        })
}

async function submit() {
    disabled.value = true;
    if (isUpdateForm.value) {
        await update();
    } else {
        await save();
    }
}

async function save() {
    {{modelName}}Api.store(resource.value)
        .then(({data}) => {
            ElMessage({
                message: t("messages.success_create"),
                type: "success",
            });
            router.push({
                path: "/{{modelNamePlural}}",
            });
        })
        .catch((error) => {
            errors.value = error.response.data.errors;
        }).finally(() => {disabled.value = false})
}

async function update() {
    {{modelName}}Api.update(resource.value)
        .then(({data}) => {
            ElMessage({
                message: t("messages.success_update"),
                type: "success",
            });
            router.push({
                path: "/{{modelNamePlural}}",
            });
        })
        .catch((error) => {
            errors.value = error.response.data.errors;
        }).finally(() => {disabled.value = false})
}

async function getResourceRelatedModels() {
    FilterApi.modelFilters("{{modelName}}")
        .then(({data}) => {
        })
}

onMounted(async () => {
    isUpdateForm.value = !!route.params.id;
    await getResource();
    await getResourceRelatedModels();
});
</script>
<template>
    <div class="main-content side-content">
        <div class="container">
            <page-header title="sidebar.{{modelNamePlural}}" :active="false">
                <li class="breadcrumb-item active" aria-current="page">
                    {{ isUpdateForm ? $t("forms.edit") : $t("messages.add_new") }}
                </li>
            </page-header>
            <spinner v-if="loaderStore.loading"></spinner>
            <el-form label-position="top">
                <!-- Basic Info -->
                <div class="card">
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <FormInput label="messages.name" :model="resource" name="name"
                                           :errors="errors.value" :required="true"/>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- Basic Info -->
                <el-button @click="submit" type="primary" class="btn btn-primary mb-4" :disabled="disabled">
                    {{ $t("messages.submit") }}
                </el-button>
            </el-form>
        </div>
    </div>
</template>

<style scoped></style>
